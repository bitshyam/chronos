name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: chronos-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: chronos-linux-aarch64
            cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: chronos-windows-x86_64.exe
            cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            name: chronos-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name: chronos-macos-aarch64
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build with cargo
        if: '!matrix.cross'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build with cross
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz chronos
          cd -

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip chronos.exe
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            */chronos-*.tar.gz
            */chronos-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-package-managers:
    name: Update Package Managers
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download release assets and calculate SHA256
        id: sha256
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Download and calculate SHA256 for each binary
          curl -sL "https://github.com/bitshyam/chronos/releases/download/v${VERSION}/chronos-macos-x86_64.tar.gz" -o macos-x86_64.tar.gz
          curl -sL "https://github.com/bitshyam/chronos/releases/download/v${VERSION}/chronos-macos-aarch64.tar.gz" -o macos-aarch64.tar.gz
          curl -sL "https://github.com/bitshyam/chronos/releases/download/v${VERSION}/chronos-linux-x86_64.tar.gz" -o linux-x86_64.tar.gz
          curl -sL "https://github.com/bitshyam/chronos/releases/download/v${VERSION}/chronos-linux-aarch64.tar.gz" -o linux-aarch64.tar.gz
          
          echo "MACOS_X86_SHA=$(shasum -a 256 macos-x86_64.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "MACOS_ARM_SHA=$(shasum -a 256 macos-aarch64.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "LINUX_X86_SHA=$(shasum -a 256 linux-x86_64.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "LINUX_ARM_SHA=$(shasum -a 256 linux-aarch64.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Update Homebrew Formula
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Create updated Homebrew formula
          cat > chronos-cli.rb << EOF
          class ChronosCli < Formula
            desc "Fast CLI tool for converting between ISO timestamps, epoch timestamps, and local time"
            homepage "https://github.com/bitshyam/chronos"
            version "${VERSION}"
            license "MIT"
          
            on_macos do
              if Hardware::CPU.intel?
                url "https://github.com/bitshyam/chronos/releases/download/v#{version}/chronos-macos-x86_64.tar.gz"
                sha256 "${{ steps.sha256.outputs.MACOS_X86_SHA }}"
              else
                url "https://github.com/bitshyam/chronos/releases/download/v#{version}/chronos-macos-aarch64.tar.gz"
                sha256 "${{ steps.sha256.outputs.MACOS_ARM_SHA }}"
              end
            end
          
            on_linux do
              if Hardware::CPU.intel?
                url "https://github.com/bitshyam/chronos/releases/download/v#{version}/chronos-linux-x86_64.tar.gz"
                sha256 "${{ steps.sha256.outputs.LINUX_X86_SHA }}"
              else
                url "https://github.com/bitshyam/chronos/releases/download/v#{version}/chronos-linux-aarch64.tar.gz"
                sha256 "${{ steps.sha256.outputs.LINUX_ARM_SHA }}"
              end
            end
          
            def install
              bin.install "chronos"
            end
          
            test do
              system "#{bin}/chronos", "--help"
              output = shell_output("#{bin}/chronos 1702664832")
              assert_match "Epoch: 1702664832", output
              assert_match "ISO:", output
              assert_match "Local:", output
            end
          end
          EOF

      - name: Update Homebrew Tap Repository
        if: github.repository == 'bitshyam/chronos'
        run: |
          # Clone the homebrew tap repository
          git clone https://github.com/bitshyam/homebrew-tap.git tap-repo
          cd tap-repo
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Copy the updated formula
          cp ../chronos-cli.rb .
          
          # Commit and push
          git add chronos-cli.rb
          git commit -m "Update chronos-cli to v${{ steps.version.outputs.VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Publish to crates.io
        run: |
          cargo login ${{ secrets.CRATES_IO_TOKEN }}
          cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
